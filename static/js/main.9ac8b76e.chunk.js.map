{"version":3,"sources":["components/LocationInput.js","components/RefreshButton.js","components/WeatherData.js","components/DegreeScaleButtons.js","App.js","serviceWorker.js","index.js"],"names":["LocationInput","handleLocationChange","location","placeholder","value","onChange","ev","target","RegExp","test","alert","RefreshButton","getWeatherData","onClick","WeatherData","name","wind","description","humidity","feelsLike","temperature","degreeScale","className","DegreeScaleButtons","handleScaleChange","onScaleChange","scale","App","useState","setLocation","weatherData","setWeatherData","setDegreeScale","query","replace","url","axios","get","then","response","console","log","data","weather","main","Math","round","temp","feels_like","speed","catch","error","useEffect","weatherDataProps","appClasses","desc","toLowerCase","includes","push","join","locationName","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9ac8b76e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction LocationInput ({handleLocationChange, location}) {\n\n    const onLocationChange = (ev) => {\n        const location = ev.target.value;\n        const regex = RegExp('[^\\\\s,a-zA-Z]');\n        if (regex.test(location)) {\n            alert('Sorry non-letters are not allowed. ');\n            return;\n        }\n        handleLocationChange(location);\n    }\n\n    return (\n            <input placeholder={\"Enter city name\"} value={location} onChange={onLocationChange}></input>\n    )\n}\n\nexport default LocationInput;","import React from \"react\";\n\nfunction RefreshButton({getWeatherData}) {\n\n    const onRefreshClick = () => {\n        getWeatherData();\n    }\n\n    return (\n            <button onClick={onRefreshClick}>\n                REFRESH\n            </button>\n    )\n}\n\nexport default RefreshButton;","import React from \"react\";\n\nfunction WeatherData({name, wind, description, humidity, feelsLike, temperature, degreeScale}) {\n\n    return (\n        <div className={\"weatherDashboard\"}>\n            <div className={\"weatherDashboard-location\"}>\n                {name}\n            </div>\n            <div className={\"weatherDashboard-overview\"}>\n                <div className={\"weatherDashboard-temp\"}>\n                    {temperature} {degreeScale}\n                </div>\n                <div className={\"weatherDashboard-desc\"}>\n                    {description}\n                </div>\n            </div>\n            <div className={\"weatherDashboard-details\"}>\n                <div className={\"weatherDashboard-label\"}>Feels like</div>\n                <div className={\"weatherDashboard-data\"}>\n                    {feelsLike} {degreeScale}\n                </div>\n                <div className={\"weatherDashboard-label\"}>Wind</div>\n                <div className={\"weatherDashboard-data\"}>\n                    {wind} km/h\n                </div>\n                <div className={\"weatherDashboard-label\"}>Humidity</div>\n                <div className={\"weatherDashboard-data\"}>\n                    {humidity} %\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WeatherData;","import React from \"react\";\n\nfunction DegreeScaleButtons({handleScaleChange}) {\n\n    const onScaleChange = (scale) => {\n        handleScaleChange(scale);\n    }\n\n    return (\n        <div className={\"degreeScale-controls\"}>\n            <button onClick={() => onScaleChange('°C')}>\n                Show °C\n            </button>\n            <button onClick={() => onScaleChange('°F')}>\n                Show °F\n            </button>\n        </div>\n    )\n}\n\nexport default DegreeScaleButtons;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport LocationInput from './components/LocationInput';\nimport RefreshButton from \"./components/RefreshButton\";\nimport axios from 'axios';\nimport WeatherData from \"./components/WeatherData\";\nimport DegreeScaleButtons from \"./components/DegreeScaleButtons\";\n\nfunction App() {\n\n    const [location, setLocation] = useState('Madrid, Spain');\n    const [weatherData, setWeatherData] = useState({});\n    const [degreeScale, setDegreeScale] = useState('°C');\n\n    const handleLocationChange = (locationName) => {\n        setLocation(locationName);\n    }\n\n    const getWeatherData = () => {\n        const query = location.replace(/ /g, '+');\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=973f1d73a370ab053bfe7255e9bf56e9`;\n        axios.get(url)\n            .then(function (response) {\n                console.log(response);\n                setWeatherData({\n                    name: response.data.name,\n                    description: response.data.weather[0].main,\n                    temperature: degreeScale === '°C' ? Math.round(response.data.main.temp - 273) : Math.round(1.8 * (response.data.main.temp - 273) + 32),\n                    humidity: response.data.main.humidity,\n                    feelsLike: degreeScale === '°C' ? Math.round(response.data.main.feels_like - 273) : Math.round(1.8 * (response.data.main.feels_like - 273) + 32),\n                    wind: response.data.wind.speed,\n                });\n            })\n            .catch(function (error) {\n                console.log(error);\n                alert('The location you entered was not found. Please check your spelling.');\n            });\n        setLocation('');\n    }\n\n    useEffect(() => {\n        getWeatherData();\n    }, []);\n\n    const handleScaleChange = (scale) => {\n        if (degreeScale !== scale && scale === '°F') {\n            setDegreeScale(scale);\n            setWeatherData({\n                ...weatherData,\n                temperature: Math.round(1.8 * weatherData.temperature + 32),\n                feelsLike: Math.round(1.8 * weatherData.feelsLike + 32)\n            });\n        } else if (degreeScale !== scale && scale === '°C') {\n            setDegreeScale(scale);\n            setWeatherData({\n                ...weatherData,\n                temperature: Math.round((weatherData.temperature - 32) / 1.8),\n                feelsLike: Math.round((weatherData.temperature - 32) / 1.8)\n            });\n        }\n    }\n\n    const weatherDataProps = {\n        name: weatherData.name,\n        description: weatherData.description,\n        temperature: weatherData.temperature,\n        humidity: weatherData.humidity,\n        feelsLike: weatherData.feelsLike,\n        wind: weatherData.wind,\n        degreeScale: degreeScale,\n    }\n\n    const appClasses = ['App'];\n    const desc = weatherData.description && weatherData.description.toLowerCase();\n    if (desc && desc.includes('clear')) {\n        appClasses.push('App--clear');\n    } else if (desc && desc.includes('cloud')) {\n        appClasses.push('App--cloud');\n    } else if (desc && desc.includes('storm')) {\n        appClasses.push('App--storm');\n    } else if (desc && desc.includes('rain')) {\n        appClasses.push('App--rain');\n    }\n\n    return (\n\n        <div className={appClasses.join(' ')}>\n            <div className={\"weatherContainer\"}>\n                <DegreeScaleButtons\n                    handleScaleChange={handleScaleChange}\n                />\n                <div className={\"controls\"}>\n                    <LocationInput\n                        handleLocationChange={(locationName) => handleLocationChange(locationName)}\n                        location={location}\n                    />\n                    <RefreshButton\n                        getWeatherData={getWeatherData}\n                    />\n                </div>\n                <WeatherData\n                    {...weatherDataProps}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}